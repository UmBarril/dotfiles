
" plugins that you need to install on IJ first
set which-key 
set sneak
" set quickscope " quickscope has to go after 'set sneak'

" built-in
set NERDTree
set surround 
set multiple-cursors
set highlightedyank 
set vim-paragraph-motion
set commentary 
set textobj-indent 
set vim-paragraph-motion 
set textobj-entire
" for more IJ plugins, got to: https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins

"" configs ""
let mapleader = " "
set incsearch
set hlsearch

" options and mappings that are supported by both Vim and IdeaVim
set ignorecase
set smartcase

set nu
set relativenumber
set showmode

" making Y act like other keys
nmap Y y$

" my previously unused key on my brazilian portuguese keyboard now has an use
noremap ç "_d
noremap Ç "_d$
onoremap ç d

" stop things from going to clipboard
vnoremap p "_dP
noremap x "_x
noremap X "_X

" Allow Ctrl+c in visual mode
vnoremap <C-c> "+y
inoremap <C-v> <C-R>+

" allow using Shift+Tab in normal mode
nnoremap <S-Tab> v<l
" allow using Tab in normal mode
nnoremap <Tab> i<Tab><esc>
" allow using Tab in visual mode
vnoremap <Tab> >gv
" allow using Tab in visual mode
vnoremap <S-Tab> <gv

" allow using Tab in visual mode
vnoremap <Tab> >gv
" allow using Tab in visual mode
vnoremap <S-Tab> <gv

"" Doesn't work on IdeaVim yet :´(
"vnoremap <expr> I mode() == "V" ? '<C-V>^I' : 'I'
"vnoremap <expr> A mode() == "V" ? '<C-V>$A' : 'I'

" yanking and pasting
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y" gg"+yG

" always paste last yank (AND NOT things from d or c)
nnoremap <leader>p "0p 
" same thing as above, but for visual mode
vnoremap <leader>p "0p

" paste from clipboard
nnoremap <leader>P "+p
" now for visual mode
vnoremap <leader>P "+p

" Substitute
nnoremap <leader>s :%s//g<Left><Left>
vnoremap <leader>s :s//g<Left><Left>

nnoremap <leader><leader>s :%s/<C-R>"//g<Left><Left>

noremap H ^
noremap L $

nnoremap <A-o> o<Esc>

""""""" Intellij Specific """"""""
""" tip: use :actionlist to see what actions you can remap

set ideajoin

" no timeout for key sequences (so which-key can be more useful)
set notimeout

" set timeoutlen=5000

" reload
nnoremap \e :e ~/.ideavimrc<CR>
nmap \r <Action>IdeaVim.ReloadVimRc.reload

nmap gh <Action>(EditorPopupMenu)
nmap <leader>u <Action>(FindUsages)

" making K also show errors
nmap K <Action>(ShowHoverInfo) 

" a bit useless... think of a better funtion to these keys later
nmap gb <Action>(Back) 
nmap gf <Action>(Forward)

" break out of the tyranny of text! Navigate by method
nmap <leader>m <Action>(MethodDown)
nmap <leader>M <Action>(MethodUp)

" jump between compilation errors
nmap ge <Action>(ActivateProblemsViewToolWindow)
nmap <leader>e <Action>(GotoNextError)
nmap <leader>E <Action>(GotoPreviousError)

" testing and debugging
nmap <leader>b <Action>(ToggleLineBreakpoint)

" comments (since we use commentary.vim now, this is not needed anymore)
"noremap gcc :action CommentByLineComment<CR>
"noremap gcb :vsc Edit.ToggleBlockComment<CR>

" moving between tabs
nmap <C-H> <Action>(PreviousTab)
nmap <C-L> <Action>(NextTab)
nmap <C-W> <Action>(CloseTab)
" nnoremap <C-L> <Action>NextWindow

" move between files
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" Refactoring
nmap <A-r> <Action>(RenameElement)
nmap <leader>r <Action>(Refactorings.QuickListPopupAction)
nmap <leader>R <Action>(RenameElement)

" format code
nmap <leader>l <Action>(ReformatCode)

" folding
nmap zc <Action>(CollapseRegion)
nmap zo <Action>(ExpandRegion)
nmap <leader>zc <Action>(CollapseAllRegions)
nmap <leader>zo <Action>(ExpandAllRegions)

